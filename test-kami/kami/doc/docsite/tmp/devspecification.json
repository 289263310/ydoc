{"page":{"type":"html","title":"开发规范","name":"devspecification","content":"<h1 id=\"kami-\">Kami组件开发规范</h1>\n<h4 id=\"0-kami-\">0.如何基于开发Kami的组件</h4>\n<p><a href=\"http://ued.qunar.com/mobile/kami/doc/tool.html\">安装kamibuilder</a></p>\n<pre><code>//fekit kami init TestWidget\n$ fekit kami init [组件名]\n</code></pre><p>  ...</p>\n<pre><code>//引用Widget\n//Kami是Kami组件所在为路径的alias\n\nvar Widget = require(&#39;Kami/scripts/core/index.js&#39;);\n//创建TestWidget UI组件\nvar TestWidget =  Widget.extend({\n    options : {\n        type: &#39;widgetName&#39;,\n        container: &#39;组件的容器&#39;,\n        template: &#39;组件的模板如果需要&#39;//和ui的唯一样式命名空间\n\n    },\n    //组件的事件，需要代理到this._widgetEl上，其中this._widgetEl是在解析模板后获得的\n    // &#39;tap [data-role=&quot;list-item&quot;]&#39;: &#39;handler&#39;\n    events: {\n        &#39;&lt;eventType&gt; &lt;selector&gt;&#39;: &#39;&lt;functionName | eventHandlerFunction&gt;&#39;\n    },\n    //当前组件的模板解析，返回解析好的模板字符串\n    parseTemplate: function(tpl) {\n\n    },\n    //处理组件的数据\n    init: function() {},\n    //将组件渲染到容器中，默认基类提供渲染\n    render: function() {\n        //组件自有的处理逻辑\n        //...\n        //调用父类的方法，将组件渲染到文档中\n        TestWidget.superClass.render.call(this);\n    },\n    //销毁组件，默认不需要写，基类提供销毁方法，如果组件有自己内部的事件，需要在destroy时销毁事件或者定时器.然后调用父类destroy方法即可\n    destroy: function() {\n        //销毁组件自身的定时器或者事件\n        //....\n\n        //调用父类的方法，将组件销毁\n        TestWidget.superClass.destroy.call(this);\n    }\n});\n</code></pre><h4 id=\"1-\">1.组件样式组织</h4>\n<p>kami中的组件样式默认是依赖<a href=\"http://ued.qunar.com/mobile/yo/doc/index.html\">Yo</a>的。</p>\n<ul>\n<li>开发新组件<code>{widget}</code>时，需要提供同名的<code>{widget}.scss</code>文件</li>\n</ul>\n<h4 id=\"2-\">2.目录规范</h4>\n<p>可以通过使用脚手架来完成新组件的创建，脚手架基于fekit，请先安装fekit</p>\n<pre><code>0. [sudo] npm install fekit -g\n1. [sudo] npm install fekit-extension-kami [-g]\n2. fekit kami init &lt;widgetName&gt;\n</code></pre><p>一个组件的目录结构如下：</p>\n<pre><code>{widget}\n├── HISTORY.md\n├── README.md\n├── build.sh\n├── index.js\n├── kami.config\n├── test\n└── src\n    ├── {widget}.js\n    └── tpl\n        ├── {widget}.string\n</code></pre><h5 id=\"2-1-history-md-\">2.1 <code>HISTORY.md</code> 文件</h5>\n<p>组件的更新历史记录。</p>\n<h5 id=\"2-2-readme-md-\">2.2 <code>README.md</code> 文件</h5>\n<p>组件使用说明，包括 Web 组件 API 介绍、使用技巧、注意事项等。</p>\n<h5 id=\"2-3-index-js-\">2.3 <code>index.js</code> 文件</h5>\n<p>组件的入口文件，默认引用src/{widget}.js</p>\n<h5 id=\"2-4-kami-config-\">2.4 <code>kami.config</code> 文件</h5>\n<p>组件的说明和配置</p>\n<pre><code>{\n    //组件的集合名称，默认都为kami\n    &quot;family&quot;: &quot;kami&quot;,\n\n    //组件的名称\n    &quot;name&quot;: &quot;base&quot;,\n\n    //组件的分类，core，primary, business, tool, external\n    &quot;category&quot;: &quot;core&quot;,\n\n    //组建的版本号\n    &quot;version&quot;: &quot;1.0.0&quot;,\n\n    //组件的依赖\n    &quot;dependance&quot;: {\n        &quot;class&quot;: &quot;1.0.0&quot;\n    },\n\n    //组件的描述\n    &quot;description&quot;: &quot;非ui类的组件工具的基类&quot;,\n\n    //组件的默认的git仓库地址\n    &quot;repository&quot;: {\n        &quot;git&quot;: &quot;git@gitlab.corp.qunar.com:kami/base.git&quot;\n    }\n}\n</code></pre><p><strong>组件的分类</strong></p>\n<ul>\n<li>core 核心库</li>\n<li>external 外部组件封装</li>\n<li>tool 工具类组件</li>\n<li>primary 基础组件</li>\n<li>business 业务组件</li>\n</ul>\n<h5 id=\"2-5-src-\">2.5 <code>src</code> 文件夹</h5>\n<p><code>src</code> 目录包含 Web 组件的模板（string）、交互（js）,默认所有的模板(string)都需要放到<code>tpl</code>文件夹下</p>\n<h6 id=\"2-5-1-widget-js-\">2.5.1 <code>{widget}.js</code> 文件</h6>\n<p>组件的交互逻辑。组件默认开发使用CMD规范。工具类组件默认继承<code>Base</code>，UI类组件默认继承<code>Widget</code>，组件内部的选择器通过<code>data-role</code>来实现，例如：</p>\n<pre><code>data-role=&quot;scroll&quot;\n</code></pre><h6 id=\"2-5-2-tpl-\">2.5.2 tpl 文件夹，存放组件需要的模板文件</h6>\n<ul>\n<li>组件的模板文件默认用<code>.string</code>拓展名</li>\n<li><code>yo-{组件名}</code>为组件的基础标识符，组件的所有子元素的样式都基于此命名</li>\n<li>模板默认语法</li>\n</ul>\n<p>如下：</p>\n<pre><code>//条件语句\n{{#if}} {{#else if}} {{/if}}\n//循环语句\n{{#each}}{{/each}}\n//变量输出\n{{value}}\n//html转义\n{{#htmlString}}\n</code></pre><p>具体模板例如：</p>\n<pre><code>&lt;div class=&quot;yo-calendar yo-select {{className}}&quot;&gt;\n    {{#each list as section}}\n    &lt;div class=&quot;{{itemClass}} yo-select-item&quot; data-role=&quot;item&quot;&gt;\n        {{#if section.tag}}\n        &lt;span class=&quot;{{tagClass}} yo-select-item-tag&quot;&gt;{{section.tag}}&lt;/span&gt;\n        {{/if}}\n    &lt;/div&gt;\n    {{/each}}\n    &lt;div class=&quot;mask&quot; data-role=&quot;mask&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><h5 id=\"2-5-test-\">2.5 <code>test</code> 文件夹</h5>\n<p>用于存放用户的测试demo的测试用例</p>\n<h3 id=\"3-\">3.命名规范</h3>\n<h5 id=\"3-1-\">3.1 文件和文件夹命名</h5>\n<ol>\n<li>所有文件或者文件夹的命名都只能包含 <strong>[a-zA-Z]</strong>，除<code>HISTORY.md</code>和 <code>README.md</code>外，其他文件都必须小写 例如pagelist、pagelist.js</li>\n</ol>\n<h5 id=\"3-2-\">3.2 变量、常量、方法命名</h5>\n<ol>\n<li>类名首字母必须大写，遵守Pascal命名规范，如 <code>Base</code>、<code>Widget</code>等</li>\n<li>模板文件名称首字母必须大写，遵守Pascal命名规范， 如 <code>LoadingTpl</code></li>\n<li>常量需要全部大写，并且中间使用<code>_</code>连接， 如 <code>EVENT_PREFIX</code></li>\n<li>默认选项必须全部大写并且中间使用<code>_</code>连接， 如 <code>DEFAULT_OPT</code></li>\n<li>私有变量和方法以<code>_</code>开始， 如 <code>_cacheWidget</code> 私有方法、 <code>_widgetMap</code>私有变量</li>\n<li>其他变量和方法遵守驼峰，如 <code>parentNode</code> 变量、 <code>getClassNamePrefix</code>方法</li>\n</ol>\n<h3 id=\"4-\">4.历史记录书写规范</h3>\n<p>记录组件变更，如果有issue最好和issue进行绑定</p>\n<pre><code>### 1.1.0\n*  #18 修复了 XXX 问题\n* [fixed] #29 修复了 YYY 问题\n* [add] #12 增加了 ZZZ 功能\n* [modify] #23 优化了 BBB 代码\n### 1.0.0\n* [new] 第一个发布版本\n</code></pre><h3 id=\"5-\">5.注释规范</h3>\n<p>所有注释都必须使用多行注释</p>\n<pre><code>/**\n * \n */\n</code></pre><p>目前支持的注释标签 </p>\n<ul>\n<li>@class 标签表明当前对象是个js的类</li>\n<li>@constructor 标签表明当前的方法是个构造函数</li>\n<li>@namespace 标签表明当前的对象是个命名空间</li>\n<li>@event 标签表明当前function是一个事件</li>\n<li>@function 标签表明当前的对象是一个<code>@function</code></li>\n<li>@property 标签表明当前的对象是一个属性，可用于class或者<code>@namespace</code></li>\n<li>@extends 标签表明当前对象继承用于<code>@class</code>对象</li>\n<li>@mixin 标签表明当前对象混入了哪些<code>@class</code>或者<code>@namespace</code>对象</li>\n<li>@category 标签用于标明js对象的分类，目前用于<code>@class</code>和<code>@namespace</code></li>\n<li>@name 标签用来表示当前对象的名称</li>\n<li>@param 标签表示当前是个参数对象</li>\n<li>@paramDetails 标签用于和@param使用用来说明<code>@param</code>的具体内容</li>\n<li>@memberOf 标签所有的<code>@function</code>,<code>@event</code>, <code>property</code>都需要只通过<code>@memberOf</code>来指定</li>\n<li>@private 标签默认只支持<code>@class</code>,<code>@namespace</code>,<code>@function</code></li>\n<li>@demo 标签默认支持<code>@class</code>,<code>@namespace</code></li>\n<li>@example 标签默认支持<code>@class</code>,<code>@namespace</code>,<code>@function</code>,<code>@event</code></li>\n<li>@template 标签用来表示当前是个模板对象</li>\n</ul>\n<h5 id=\"5-1-class-\">5.1 <code>class</code>类</h5>\n<p>使用@class</p>\n<pre><code>/**\n * @class className\n * @constructor\n * @extends extendClassName\n * @category cactegoryName\n * @demo demoLinkAddress\n */\n</code></pre><h5 id=\"5-2-namespace-\">5.2 <code>namespace</code>命名空间</h5>\n<p>使用@namespace</p>\n<pre><code>/**\n * @namespace namespaceName\n * 命名空间的描述\n * @name {Object} namespaceName\n * @private\n */\n</code></pre><h5 id=\"5-3-function-\">5.3 <code>function</code>函数</h5>\n<p>使用@function\n函数必须使用<code>@memberOf</code>来标记当前函数是属于那个类或者命名空间</p>\n<pre><code>    /**\n     * 函数描述\n     * \n     * @function functionName\n     * @memberOf  memberOf\n     * @private\n     * @param  {paramType} paramName paramDescription\n     */\n</code></pre><h5 id=\"5-3-event-\">5.3 <code>event</code>事件</h5>\n<p>使用@event</p>\n<pre><code>    /**\n     * 事件描述\n     * @event eventName\n     * @param  {paramType} paramName paramDescription\n     * @memberOf memberOf\n     */\n</code></pre><h5 id=\"5-4-example-\">5.4 <code>example</code>例子</h5>\n<p>使用@example</p>\n<pre><code>    /**\n     * @function functionName \n     * @example\n     * Alert.show({\n     *     content: &#39;aaa&#39;,\n     * });\n     */\n</code></pre><h5 id=\"5-5-property-\">5.5 <code>property</code>属性</h5>\n<p>使用@property</p>\n<pre><code>    /**\n     * @property {propertyType} propertyName propertyDescription\n     * @property {propertyType} propertyName propertyDescription\n     * @memberOf memberOf\n     */\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n</code></pre><p>=======</p>\n<h5 id=\"5-5-template-\">5.5 <code>template</code>属性</h5>\n<p>使用@template</p>\n<pre><code>/**\n *\n * @template itemTpl\n * 列表选项的模板，该模板自定义时，itemTpl的模板\n * 必须含有data-role=&quot;list-item&quot; 和 data-index={{dataIndex}}两个属性\n * @memberOf Pagelist\n * @path ./tpl/pagelist-item.string\n * \n */\n</code></pre><p>@path表示当前模板的相对路径，@path必须写在注释块最后</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>494b4723fcaa97f08485e701bacd6ac67f97bc7c</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n","sidebar":[],"menu":[{"name":"info","title":"简介","type":"html"},{"name":"startup","title":"起步","type":"markdown"},{"name":"widget","title":"组件API","type":"js"},{"name":"tool","title":"工具","type":"markdown"},{"name":"devspecification","title":"开发规范","type":"markdown"},{"name":"history","title":"历史","type":"markdown"}]},"title":"Kami","footer":"Kami","banner":{"title":"Kami","description":"为移动而生的组件库"},"menus":[{"name":"info","title":"简介","type":"html"},{"name":"startup","title":"起步","type":"markdown"},{"name":"widget","title":"组件API","type":"js"},{"name":"tool","title":"工具","type":"markdown"},{"name":"devspecification","title":"开发规范","type":"markdown"},{"name":"history","title":"历史","type":"markdown"}]}