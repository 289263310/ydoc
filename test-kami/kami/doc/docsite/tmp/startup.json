{"page":{"type":"html","title":"起步","name":"startup","content":"<h1 id=\"kami-\">Kami起步</h1>\n<h4 id=\"kami-\">Kami开发前须知</h4>\n<p>Kami组件依赖于Yo样式，因此引入组件的同时需要引入同名Yo样式，若非如此则需用户重写相关组件样式。</p>\n<ul>\n<li><a href=\"http://ued.qunar.com/mobile/yo/doc/\">使用Yo进行移动端开发</a></li>\n</ul>\n<h4 id=\"cmd-kami-\">CMD规范下的Kami组件使用方式</h4>\n<p>基于kami的开发首先需要安装Kami构建工具， kami构建工具依赖fekit，如需使用默认样式则需要安装Yo构建工具。</p>\n<ul>\n<li><a href=\"http://wiki.corp.qunar.com/pages/viewpage.action?pageId=42273573\">如何安装fekit</a></li>\n<li><a href=\"tool.html\">如何安装构建工具</a></li>\n<li><a href=\"http://ued.qunar.com/mobile/yo/doc/\">如何安装Yo构建工具</a></li>\n</ul>\n<p>在使用构建工具安装完组件和相应的样式以后，用户在需要引入组件的JS文件中<code>require</code>方式直接引用即可。如下：</p>\n<pre><code>var KamiAlert = require(&#39;./kami/scripts/alert/index.js&#39;);\n</code></pre><h4 id=\"-kami-\">引入脚本文件的Kami组件使用方式</h4>\n<ul>\n<li>下载Kami组件和Yo样式压缩文件</li>\n<li>直接在页面引入这两个文件</li>\n</ul>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://ued.qunar.com/mobile/source/kami/release/1.0.0/kami.css&quot;/&gt;\n&lt;script src=&quot;http://ued.qunar.com/mobile/source/kami/release/1.0.0/kami.js&quot; /&gt;&lt;/script&gt;\n</code></pre><ul>\n<li>使用组件</li>\n</ul>\n<pre><code>var alert = new window.Kami.Alert({\n    title: &quot;提示&quot;,\n    content: &quot;test&quot;\n});\n</code></pre><blockquote>\n<p><strong>注意:</strong>\n所有组件，均在 <em>window.Kami</em> 命名空间中</p>\n</blockquote>\n<h4 id=\"-qapp-kami-\">基于QApp的Kami组件使用方式</h4>\n<p>QApp作为一套完善的移动端框架提供了组件生命周期的管理，Kami组件使用适配器的方式来使用户无需关心组件的销毁。\n <a href=\"http://ued.qunar.com/mobile/qapp/doc/\">使用QApp进行移动端开发</a></p>\n<ul>\n<li>安装Kami-QApp适配器</li>\n</ul>\n<pre><code>fekit install QApp-plugin-kami-adapter\n</code></pre><ul>\n<li>引入Kami组件</li>\n</ul>\n<pre><code>var KamiPagelist = require(&#39;Kami/scripts/pagelist/index.js&#39;);\n</code></pre><ul>\n<li>注册Kami组件到QApp上</li>\n</ul>\n<pre><code>QApp.util.KamiAdapterFactory.register(&#39;pagelist&#39;, KamiPagelist);\n</code></pre><ul>\n<li>为QApp上设置Kami组件默认配置</li>\n</ul>\n<pre><code>QApp.util.KamiAdapterFactory.setDefaultOptions(&#39;pagelist&#39;, { \n   refreshTpl: refreshTpl,\n    loadmoreTpl: loadmoreTpl,\n    // 刷新激活高度\n    refreshActiveY: 40,\n    // 加载更多容器高度\n    loadmoreContY: 40,\n    preventDefault: false,\n    tapInterval: 1000,\n    infinite: false\n});\n</code></pre><ul>\n<li>在QApp中使用Kami组件</li>\n</ul>\n<pre><code>var pageList = QApp.showWidget(&#39;pagelist&#39;, {\n        container: self.doms.list,\n        datasource: err ? [] : data.shopList,\n        checkedClass: &#39;item-on&#39;,\n        pagesize: PAGE_SIZE,\n        template: listWrapperTpl,\n        itemTpl: listItemTpl,\n        infinite: true,\n        nodataTpl: noDataTpl,\n        activeClass: &#39;item-light&#39;\n});\npageList.on(&#39;loadmore&#39;, function() {});\n</code></pre><blockquote>\n<p><strong>注意:</strong>\n使用Kami组件时请在QAppView生命周期处于Show时使用</p>\n</blockquote>\n<ul>\n<li>禁用Kami组件的<code>Tap</code>事件</li>\n</ul>\n<p>由于Kami内部实现了Tap事件，QApp内部也实现了Tap事件，避免事件冲突所以需要禁用掉Kami的Tap事件</p>\n<pre><code>window.Kami.disableTapEvent = true;\n</code></pre><ul>\n<li>设置全局样式</li>\n</ul>\n<pre><code>window.Kami.theme = &#39;yo&#39;;\n</code></pre><blockquote>\n<p><strong> 附加:</strong>\nQMB作为QApp项目构建管理工具，可以安装管理Kami组件。使用QApp的用户使用QMB项目的构建工具上配置Kami组价。</p>\n</blockquote>\n<ul>\n<li>dhfudhfuhd</li>\n</ul>\n","sidebar":[],"menu":[{"name":"info","title":"简介","type":"html"},{"name":"startup","title":"起步","type":"markdown"},{"name":"widget","title":"组件API","type":"js"},{"name":"tool","title":"工具","type":"markdown"},{"name":"devspecification","title":"开发规范","type":"markdown"},{"name":"history","title":"历史","type":"markdown"}]},"title":"Kami","footer":"Kami","banner":{"title":"Kami","description":"为移动而生的组件库"},"menus":[{"name":"info","title":"简介","type":"html"},{"name":"startup","title":"起步","type":"markdown"},{"name":"widget","title":"组件API","type":"js"},{"name":"tool","title":"工具","type":"markdown"},{"name":"devspecification","title":"开发规范","type":"markdown"},{"name":"history","title":"历史","type":"markdown"}]}